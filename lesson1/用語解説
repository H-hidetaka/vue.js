・データバインディング
vue.jsでは、アプリで利用する値をデータオブジェクトで用意しておいて、
テンプレートからこれを参照する、という役割分担が基本

・Mustache構文
テンプレートからデータオブジェクトにアクセスするには、{{...}}という構文を利用する。
以下詳細
今回のサンプルでは、{{　message }}で、データオブジェクトの
messageプロパティの値をそのまま引用しているだけですが、{{...}}には任意の
javascriptしきを表すことも可能です。
例えば以下は、いずれも妥当なMustache式です。

{{ 5 + 3}} //簡単な演算
{{ value + 2}} //変数との演算
{{ message.substring(1 )}} //メソッド呼び出し
{{ Math.abs(-10) }} //組み込みオブジェクトの呼び出し

{{...}}では、Math,Dateなどjavascriptの組み込みオブジェクトにもアクセスできる。

・ディレクティブ
vue.jsのテンプレートを学ぶことは、ディレクティブを学ぶことである
{{...}}のバインドする方法は簡単であるが、できることはテキスト部分に値を反映させるだけ。
ディレクティブは属性やスタイルの操作、条件分岐、繰り返し処理など複雑な機能を学べる
「v- ~」から始まる属性

<a v-bind:href="url" title="..."> リンクです </a>
v-bind:href="url"　HTMLの属性として表す
title="..."　標準の属性と併記も可能

v-bind属性の省略構文
v-bindはよく利用する、という理由から、省略構文も用意されており、以下は同じになる
<div id="app>
  <a v-bind:href="url">WINGプロジェクト</a>
</div>

<a :href="url">サポートサイト</a>
本来の属性ちの先頭にコロン（:)を付与するだけなので、随分とスッキリする。

・ブール属性（論理属性）
checked, selected, disabledそして、multipleなど、
値がいらない(=属性名を指定するだけで意味がある。)
属性のことを論理属性、またはブール属性という


これらの値をバインドするにはtrueまたはfalse値を用います。

・ディレクティブの引数
vue.jsの文法でコロンの後方は、ディレクティブの引数である
引数を受け取ったら、コロン区切りで表記すること

・算出プロパティ
既存のプロパティを演算（算出）した結果を取得するための
ゲッター（getter)です
comptedオプション配下に「プロパティ名：　関数,...」形式で定義
算出プロパティ配下では、「this.プロパティ名」でデータオブジェクトにアクセスできる。

・算出プロパティとメソッドの相違点
１算出プロパティは引数をモテない
算出プロパティは、プロパティという性質上、引数をモテまえせn(「（）」)を伴う呼び出しができないから。
よって、引数を伴うような呼び出しには、メソッドを利用する

２、算出プロパティは取得用途
既存データの「加工を伴う取得」が算出プロパティの用途である
一方、メソッドはデータ取得に加え、操作や更新にも利用できる
マウスクリックなどに対応したイベント処理なども、メソッドの守備範囲。
要は算出プロパティでできることはメソッドでもできる。
ただ、引数を伴わない単純なかこうや演算なのであれば、算出プロパティを利用したほうがコードの意図が明確になる

３、算出プロパティの値はキャッシュされる
そして、算出プロパティとメソッドとの決定的な違いが、method_diff.htmlに記載する。

・算出するプロパティのセッター
算出プロパティでは、値を取得するだけでなく、値を設定するためのセッターを儲けることもできる。
ただし、それほど頻繁には利用しない。

・データプロパティ
通常のプロパティです。
代入された値をそのまま保存し、保存された値をそのまま返します。
obj.prop = 100;
obj.func = function(){};

・アクセサープロパティ
アクセサープロパティは、
代入された値を任意の方法および形式で保存するセッター関数と、
保存された値または任意の値を任意の形式で返すゲッター関数が定義されたプロパティです。

・ゲッター関数

ゲッター関数は、オブジェクトリテラル内で次の形式で記述します。

get プロパティ名(){
    ・・・関数コード
    return 戻り値;
}

ゲッター関数は引数がありません。
関数内のコードは、外部に確保してある変数をそのまま、あるいは一つまたは複数の変数を加工して戻り値として返します。
変数を使用せず、固定値を返すこともできます。

・vueインスタンスのライフサイクル
生成から破棄まで。
それを行うvueで用意されたメソッドをライフサイクルハックという。

・コンパイル
コンパイルとは、プログラミング言語で記述されたソフトウェアの設計図（ソースコード）を、
コンピュータが実行可能な形式（オブジェクトコード）に変換する作業のことです。
プログラマによって記述されたソースコードは、人間が読んで理解できるテキスト形式となっています。
しかしそのままの形式では、コンピュータは理解できません。（コンピュータはコンピュータ言語でしか理解できない　数字の０と1からなる）

60：40：20になったらどれだけやれたか確認。
1時間で４４４ページ中４ページ進んだ。（現在３１p）
改善点：文章を多めに描きすぎたので、次回はコード中心にかく。

３：00：00になったら経過報告
1時間で４４４ページ中７p進んだ。（現在３７p）
改善点：文章は大分抑えて、コードを書くようになったが、
エラーがでて想定と違うことが毎回起きていたので思った以上に沼にハマっている。
よくするにはより一層codeのみを意識してやり続けるのが良いだろう

8：00：00になったら経過報告
理想1時間で４４４ページ中ページ3p進んだ。（現在100p〜150）ページ中
理想2時間で４４４ページ中ページ7p進んだ。（現在47）ページ中
理想2時間で４４４ページ中ページ7p進んだ。（現在47）ページ中
改善点

1時間 3p
2時間
3時間
4時間
5時間
